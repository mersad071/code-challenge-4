service: code-challenge-4-cloudfront
frameworkVersion: '3'

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  deploymentBucket:
    name: code-challenge-4-${self:provider.region}-${aws:accountId}
    serverSideEncryption: AES256

plugins:
  - serverless-deployment-bucket

resources:
  Resources:
    # The Amazon S3 bucket into which our Single Page Application build files must be deployed
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: 'cc4-${self:provider.stage}-${aws:accountId}'
        PublicAccessBlockConfiguration:
          BlockPublicAcls : false
          BlockPublicPolicy : true
          IgnorePublicAcls : true
          RestrictPublicBuckets : true
        LoggingConfiguration:
          DestinationBucketName: !Ref LoggingBucket
          LogFilePrefix: s3-access-logs
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'

    # The Amazon CloudFront origin access identity
    CFOriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      DependsOn:
        - S3Bucket
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Sub code-challenge-4-cloudfront

    # The Amazon S3 bucket policy for securing the bucket hosting the application
    BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Id: LoggingPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PolicyForCloudFrontPrivateContent
              Effect: Allow
              Principal:
                CanonicalUser: 
                  Fn::GetAtt: 
                    CFOriginAccessIdentity.S3CanonicalUserId
              Action: 's3:GetObject*'
              Resource: !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
        Bucket: !Ref S3Bucket

    LoggingBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: cc4-${self:provider.stage}-${aws:accountId}-logs
        PublicAccessBlockConfiguration:
          BlockPublicAcls : true
          BlockPublicPolicy : true
          IgnorePublicAcls : true
          RestrictPublicBuckets : true
        AccessControl: LogDeliveryWrite
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      DeletionPolicy: Delete

    # The Amazon CloudFront distribution exposing our Single Page Application
    CFDistribution:
      Type: 'AWS::CloudFront::Distribution'
      DependsOn:
        - CFOriginAccessIdentity
      Properties:
        DistributionConfig:
          Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CFOriginAccessIdentity}"
          Enabled: 'true'
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            TargetOriginId: S3Origin
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_All
          Logging:
            Bucket: !GetAtt LoggingBucket.RegionalDomainName
            Prefix: 'cloudfront-access-logs'