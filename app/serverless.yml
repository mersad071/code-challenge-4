service: code-challenge-4
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  deploymentBucket:
    name: code-challenge-4-${self:provider.region}-${aws:accountId}
    serverSideEncryption: AES256
  environment:
    DYNAMODB_TABLE: ${param:tableName}
plugins:
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function
  - serverless-appsync-plugin

custom:
  appSync: ${file(appsync.yml)}

package:
  patterns:
    - '!../node_modules/**'
    - '../node_modules/joi/**'
    - '../node_modules/@hapi/**'
    - '../node_modules/@sideway/**'

functions:
  list:
    handler: functions/list.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}" 

  get:
    handler: functions/get.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"

  create:
    handler: functions/create.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"  

  update:
    handler: functions/update.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"  

  delete:
    handler: functions/delete.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"